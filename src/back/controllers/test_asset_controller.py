# generated by gpt-4o-mini
import pytest
from models import models
from asset_controller import AssetController

class TestAssetController:
    @pytest.fixture
    def asset_controller(self):
        return AssetController()

    def test_get_asset(self, asset_controller, mocker):
        mocker.patch.object(asset_controller, '_getAssetRows', return_value=[
            (1, 'dummy_asset1', 'test description')
        ])
        
        asset = asset_controller.getAsset()
        
        assert asset.asset_id == "dummy_asset1"
        assert asset.description == "a;sdfkja;sdgha;sdjf;asdjf;asdfja;ljdfal;sdfja;sldjfa;sjgoiwnfasd;jf;salfj"
        assert len(asset.pics) == 2
        assert asset.pics[0].filepath == "media/truck.jpg"
        assert asset.pics[1].filepath == "media/logo.png"
        assert len(asset.counts) == 1
        assert asset.counts[0].count == 5
        assert asset.counts[0].location.description == "test description"

    @pytest.mark.parametrize("offset, count", [(0, 10), (10, 5), (5, 0)])
    def test_get_asset_rows(self, asset_controller, mocker, offset, count):
        expected_rows = [(i, f'asset_{i}', f'description_{i}') for i in range(offset, offset + count)]
        mocker.patch('sqlite3.connect', return_value=mocker.Mock())
        mock_cursor = mocker.Mock()
        mock_cursor.fetchall.return_value = expected_rows
        sqlite3.connect.return_value.cursor.return_value = mock_cursor
        
        rows = asset_controller._getAssetRows(offset, count)
        
        mock_cursor.execute.assert_called_once_with("SELECT id, asset_id, description FROM asset LIMIT ?, ?", [offset, count])
        assert rows == expected_rows
